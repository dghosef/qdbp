{
  Node[#None{}]
  Prepend[that|
    curr_list: self Node.
    {
      self
      Node[#Prepend {Val[that] Rest[curr_list]}]
    }
  ]
  Append[that|
    curr_list: self Node.
    {
      self
      Node[#Append {Val[that] Rest[curr_list]}]
    }
  ]
  ++[that|
    node1: self Node.
    node2: that Node.
    {
      self
      Node[#Concat {L[node1] R[node2]}]
    }
  ]
  Map [that|
    map: {fn lst|
      map: self
      lst
        Concat?[node|
          newl: map! fn lst: (node L).
          newr: map! fn lst: (node R).
          #Concat {
            L[newl]
            R[newr]  
          }
        ]
        Prepend?[node|
          newval: fn! (node Val).
          newrest: map! fn lst: (node Rest).
          #Prepend {
            Val[newval]
            Rest[newrest]
          }
        ]
        Append?[node|
          newrest: map! fn lst: (node Rest).
          newval: fn! (node Val).
          #Append {
            Val[newval]
            Rest[newrest]
          }
        ]
        None?[#None{}].
    }
    newval: map! that lst: (self Node).
    {
      self
      Node[newval]
    }
  ]
}