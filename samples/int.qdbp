(* Compile time typecheck to see that a and b!. have the same type. 
  returns a
*)
unify := {val with| 
  (#True{})
    True? [val]
    False? [with!.].
}
is_int := {val|
  unify! val with: {$qdbp_zero_int()}.
}
{ val|
  {
    Val[
      unify! val with: {$qdbp_zero_int()}.
    ]
    AsString[
      @string! $qdbp_int_to_string(self Val.).
    ]
    Print[
      self AsString. Print.
    ]
    +[val|
      new_val := $qdbp_int_add_int(self Val. is_int! (val Val).)
      {self Val[new_val]}
    ]
    -[val|
      new_val := $qdbp_int_sub_int(self Val. is_int! (val Val).)
      {self Val[new_val]}
    ]
    *[val|
      new_val := $qdbp_int_mul_int(self Val. is_int! (val Val).)
      {self Val[new_val]}
    ]
    /[val|
      new_val := $qdbp_int_div_int(self Val. is_int! (val Val).)
      {self Val[new_val]}
    ]
    %[val|
      new_val := $qdbp_int_mod_int(self Val. is_int! (val Val).)
      {self Val[new_val]}
    ]
    =[val|
      $qdbp_int_eq_bool(self Val. is_int! (val Val).)
    ]
    !=[val|
      $qdbp_int_ne_bool(self Val. is_int! (val Val).)
    ]
    <[val|
      $qdbp_int_lt_bool(self Val. is_int! (val Val).)
    ]
    >[val|
      $qdbp_int_gt_bool(self Val. is_int! (val Val).)
    ]
    <=[val|
      $qdbp_int_le_bool(self Val. is_int! (val Val).)
    ]
    >=[val|
      $qdbp_int_ge_bool(self Val. is_int! (val Val).)
    ]
    
  }
}