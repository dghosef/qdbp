(* Compile time typecheck to see that a and b!. have the same type. 
  returns a
*)
unify := {that with| 
  (#True{})
    True? [that]
    False? [with!.].
}
is_int := {that|
  unify! that with: {$qdbp_zero_int()}.
}
{ that|
  {
    Val[
      unify! that with: {$qdbp_zero_int()}.
    ]
    AsString[
      @string! $qdbp_int_to_string(this Val.).
    ]
    Print[
      this AsString. Print.
    ]
    +[that|
      new_val := $qdbp_int_add_int(this Val. is_int! (that Val).)
      {this Val[new_val]}
    ]
    -[that|
      new_val := $qdbp_int_sub_int(this Val. is_int! (that Val).)
      {this Val[new_val]}
    ]
    *[that|
      new_val := $qdbp_int_mul_int(this Val. is_int! (that Val).)
      {this Val[new_val]}
    ]
    /[that|
      new_val := $qdbp_int_div_int(this Val. is_int! (that Val).)
      {this Val[new_val]}
    ]
    %[that|
      new_val := $qdbp_int_mod_int(this Val. is_int! (that Val).)
      {this Val[new_val]}
    ]
    =[that|
      $qdbp_int_eq_bool(this Val. is_int! (that Val).)
    ]
    !=[that|
      $qdbp_int_ne_bool(this Val. is_int! (that Val).)
    ]
    <[that|
      $qdbp_int_lt_bool(this Val. is_int! (that Val).)
    ]
    >[that|
      $qdbp_int_gt_bool(this Val. is_int! (that Val).)
    ]
    <=[that|
      $qdbp_int_le_bool(this Val. is_int! (that Val).)
    ]
    >=[that|
      $qdbp_int_ge_bool(this Val. is_int! (that Val).)
    ]
    
  }
}