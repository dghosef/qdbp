expr: {
  +[that|
    me: self
    {self
      L[(me L) + (that L).]
      R[(me R) + (that R).]
    }
  ]
  *[that|
    me: self
    {self
      L[(me L) * (that L).]
      R[(me R. * that L.) + (that R. * me L.).]
    }
  ]
  Exp[
    me: self
    {self
      L[self]
      R[self * (me R).]
    }
  ]
  Derive[self R.]
}
zero: {expr :: L[self] R[self] }
const: {that|
  that = 0.
    True? [zero]
    False? [{expr :: L[self] R[zero]}].
}
one: const! 1.
x: {expr :: L[self] R[one]}
expr: x * (const! 1). + (x * x). Exp.
expr Derive.
