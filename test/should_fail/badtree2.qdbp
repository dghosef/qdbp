
if: {condition then else|
  condition
    True? [then!.]
    False? [else!.].
}

some: { value |
  {
    Value[value]
    >>[fn|
      self Value.
        Some? [v | #Some (fn! v)]
        None? [#None{}].
    ]
  }
}
option: {
  Some[{value | some! #Some value.}]
  None[some! #None{}.]
}
some: option Some.
none: option None.
insert: {tree key value|
    tree
        Empty? [#Node {Value[value] Key[key] Left[#Empty{}] Right[#Empty{}]}]
        Node? [ node |
            me: self
            if! (node Key. < key) then: {
            #Node { node
                Right[me! (node Right) key: key value: value.]
            }
            } else: {
            #Node { node
                Left[me! (node Left) key: key value: value.]
            }
            }.
        ].
}
lookup: {tree key|
    me: self
    tree
        Empty? [none]
        Node? [ node |
            if! ((node Key) = key) then: {
                some! (node Value).
            } else: {
                if! ((node Key) < key) then: {
                    me! (node Right) key: key.
                } else: {
                    me! (node Left) key: key.
                }.
            }.
        ].
}

table: {
    Data[#Empty{}]
    At[key|
    lookup! (self Data) key: key.
    ]
    At[key put|
    newdata: insert! self Data.
        key: key 
        value: put.
    {self Data[newdata]}
    ]
}
foo: {self!.}
stack: {
  Data[#Empty{}]
  Push[that|
    curr_data: self Data.
    { self
      Data[#NonEmpty {
        Val[that]
        Next[curr_data]
      }]
    }
  ]
  Peek[
    self Data.
      Empty?[foo!.]
      NonEmpty?[data| data Val.].
  ]
}

table At (3) put: (stack Push 3. Push 4.). At(5) put: (stack Push "HI").